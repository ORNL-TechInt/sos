Searching the power grid for maximum flow
==============
:latex-use-bibliography-environment:
:latex-use-running-title-headings:

Description
-----------
[NOTE]
This is a draft document - not intended as a deliverable or distribution at
this point. The goal is to support the model discussion and to capture issues
raised during the discussions.

source DoD
The fork-thread benchmark

source Brad Settlemyer
Trying to examine a real-world application of this benchmarking code.
Consider the case of 1 million smart meters constructing a representation of
the power grid for the Tennessee Valley Authority (TVA).  The TVA is
interested at looking at power grid maximal flow to examine whether the
electrical grid can withstand the loss of some number of power generating
stations. 

Actors
------
1.  The object storage system
2.  An electrical meter reader
3.  An electrical smart meter
4.  A maximum flow analysis application used by TVA

Assumptions
-----------


Steps
-----------
1.  Four million smart meters deployed throughout the south east perform
  electrical sensing to determine the makeup of the edges and vertices of the
  power grid closest to the smart meter.  Each meter contains 4 Mebibytes of
  storage to store its view of the local power grid resources.
2.  Fifty thousand meter readers drive around in trucks equipped
  with a wireless smart reader device that retrieves the contents of each smart
  reader and transmits the data via satellite link into a centralized object
  store.  The file format used ensures that each meter reader is able to write
  into the store simultaneously, generating a flow-weighted graph
  representation of the power grid that is written in 4MiB increments with a
  total graph size of roughly 15.25TiB (not including the data indexes).
3.  As part of its counter-terrorist task force duties, TVA is required to run
  simulations to determine the maximum flow of various points within the power
  grid and the impacts of several generating stations being taken offline.  In
  order to implement the Ford-Fulkerson algorithm to solve for maximum flow, the
  power grid representation must be searched in a breadth-first manner.
  3.1  A maximum flow analysis application is started on a computation node
  3.2  The application caches the graph index which describes the beginning
    offset for various sub portions of the graph
  3.3  The application commences a breadth-first search for each node by
    consulting the cached index to determine where in the file to find the edge
    weights for each of the neighboring nodes.  The resulting I/O access
    pattern results in 64KiB read access throughout the file.
  3.4  On completion of the breadth-first search, TVA calculates the maximal
    flow characteristics desired
4.  TVA reports the requested data to the Department of Homeland security.

Variations
----------
1.  Rather than using a single analysis node, TVA recognizes that breadth
first search can be trivially parallelized, and use a collection of 1000 nodes
to perform the breadth-first search.
2.  TVA schedules this as part of their monthly batch jobs that automatically
analyzes weaknesses in the power grid as the power grid expands organically.

Issues
------
1.  There is a large opportunity to improve upon existing file system graph
data formats.  In general, graphs are stored in compressed sparse row format in
memory for efficiency, but often written to file as edge lists or adjacency
lists without symmetry to save space.  Unfortunately, the graph cannot easily
be assembled into a single data set, instead each process probably needs to
produce its own file, and then the files can be stitched together later if
needded -- but there isn't great file system support for this type of
operation.  Something to support that could be a large gain in the graph
analytics community.
2.  The performance will be limited not by the analysis machines, but instead
by the IOP rates supported by the object store.
3.  Pretty much assume that between the index and the algorithm, there isn't
alot of memory left on the compute node running the analysis task.
4.  Past experience has shown that the degree of discontinuity in the data
store strongly impacts the performance of random reads.  In particular, if the
random read access causes two seeks, one to read the file metadata and one to
read the file content, then the performance is likely to be far worse, than if
the storage system can effectively cache the metadata (which is impossible
under the pressure generated by the data reads).
5.  Direct I/O access almost always matters for these kinds of access patterns.
